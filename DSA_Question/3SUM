class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;
        // APPROCH 3 -> BEST APPROCH
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            int j = i+1 , k=n-1;
            while(j<k){
                int sum = nums[i]+nums[j]+nums[k];
                if(sum<0) j++;
                else if(sum>0)k--;
                else{ // here sum == 0
                    List<Integer> arr = new ArrayList<>();
                    arr.add(nums[i]);
                    arr.add(nums[j]);
                    arr.add(nums[k]);
                    j++ ; k--;
                    while(j<k && nums[j]==nums[j-1]) j++;
                    ans.add(arr);
                        
                }
            }
        }
        return ans;


       
        // // BRUTE FORCE APPROCH -> result in TLE 
        // List<List<Integer>> ans = new ArrayList<>();
        // for(int i = 0; i < n; i++) {
        //     for(int j = i + 1; j < n; j++) {
        //         for(int k = j + 1; k < n; k++) {
        //             if(nums[i] + nums[j] + nums[k] == 0) {
        //                 List<Integer> arr = new ArrayList<>();
        //                 arr.add(nums[i]);
        //                 arr.add(nums[j]);
        //                 arr.add(nums[k]);
        //                 Collections.sort(arr); // Optional: helps avoid duplicates
        //                 if(!ans.contains(arr)) {
        //                     ans.add(arr);
        //                 }
        //             }
        //         }
        //     }
        // }
        // return ans;

        // APPROCH 2 better than 1st but not best
        
        // List<List<Integer>> ans = new ArrayList<>();
        // Set<List<Integer>> uniqueTriplets;
        // for(int i=0;i<n;i++){
        //     int target = -nums[i];
        //     Set<Integer> s;
        //     for(int j=i+1;j<n;j++){
        //         int third = target - nums[j];
        //         if(!s.contains(third)){
        //             List<Integer> trip = new ArrayList<>();
        //             trip.add(nums[i]);
        //             trip.add(nums[j]);
        //             trip.add(target);
        //             Collections.sort(trip); 
        //             uniqueTriplets.add(trip);
        //         }
        //         s.add(nums[j]);
        //     }
        // }
        // ans.add(uniqueTriplets);
        // return ans;


    
       
    }
}
